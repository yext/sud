name: Go

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:

    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.13
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Get dependencies
      run: |
        go get -v -t -d ./...
        if [ -f Gopkg.toml ]; then
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            dep ensure
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        

    - name: Build
      run: go build -v .

    - name: Test
      run: go test -v .
      
  release-osx:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
    - uses: olegtarasov/get-tag@v2
      id: tagName
    - run: mkdir sud_${{ steps.tagName.outputs.tag }}
    - name: Build Release
      run: |
        go build -o sud_${{ steps.tagName.outputs.tag }}/sud .
        SHA=$(sha256sum sud_${{ steps.tagName.outputs.tag }}/sud | cut -d' ' -f1)
        mv sud_${{ steps.tagName.outputs.tag }}/sud sud_${{ steps.tagName.outputs.tag }}/sud-${SHA}
    - name: Get version
      id: get_version
      run: echo ::set-output name=version::${GITHUB_REF/refs\/tags\//}
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ github.ref }}
        draft: false
        prerelease: true
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: sud_${{ steps.tagName.outputs.tag }}/sud-${SHA}
        asset_name: sud-${SHA}
        asset_content_type: application/binary
